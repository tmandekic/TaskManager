@using TaskManager.Shared;


@if (!Task.IsEditing)
{
    <tr class="@RowBackgroundStyle">
        <td><a href="" @onclick:preventDefault @onclick="async e => { await DeleteTaskAsync(e); }"><i class="oi oi-trash mr-2"></i>Delete</a></td>
        <td>@Task.DueBy.ToShortDateString()</td>
        <td>@Task.TaskName</td>
        <td>
            <input type="checkbox"
                   @onchange="async e => {await MarkCompletedAsync(e); }"
                   checked="@IsChecked()"
                   value="TaskCompletedValue" />
        </td>
        <td>
            @if (Task.IsCompleted)
            {
                <span>Completed</span>
            }
            else if (Task.DueBy > DateTime.MinValue && Task.DueBy < DateTime.Now.Date)
            {
                <span>Overdue</span>
            }
            else
            {
                <span>Not completed</span>
            }
        </td>
        <td>
            <div class="btn btn-link mx-3" @onclick="async e => {await EditTaskAsync(e);}"><i class="oi oi-pencil mr-2"></i>Edit</div>
        </td>
    </tr>
}
else
{
    <tr>
        <td></td>
        <td>
            <input type="date" @bind="Task.DueBy" />
            <ValidationMessage For="() => Task.DueBy" />
        </td>
        <td>
            <input type="text" @bind="Task.TaskName" />
            <ValidationMessage For="() => Task.TaskName" />
        </td>
        <td>
            <input type="checkbox"
                   @onchange="async e => {await MarkCompletedAsync(e); }"
                   checked="@IsChecked()"
                   value="TaskCompletedValue" />
        </td>
        <td>
        </td>
        <td>
            <div class="btn btn-link mx-3" @onclick="async e => {await SaveTaskAsync(e);}"><i class="oi oi-circle-check mr-2"></i>Save</div>
        </td>
    </tr>
}

@code {
    [Parameter]
    public TaskItem Task { get; set; }

    [Parameter]
    public string RowBackgroundStyle { get; set; }

    [Parameter]
    public EventCallback<TaskItem> DeleteTaskClicked { get; set; }
    [Parameter]
    public EventCallback<TaskItem> EditTaskClicked { get; set; }
    [Parameter]
    public EventCallback<TaskItem> SaveTaskClicked { get; set; }
    [Parameter]
    public EventCallback<TaskItem> MarkAsCompleteClicked { get; set; }


    private bool IsChecked()
    {
        if (Task.IsCompleted)
        {
            return true;
        }
        return false;
    }

    private string TaskCompletedValue()
    {
        if (Task.IsCompleted)
        {
            return "Completed";
        }
        else if (Task.DueBy > DateTime.MinValue && Task.DueBy < DateTime.Now.Date)
        {
            return "Overdue";
        }
        else
        {
            return "Not completed";
        }
    }

    private async Task MarkCompletedAsync(ChangeEventArgs e)
    {
        bool isCompleted;
        if (bool.TryParse(e.Value.ToString(), out isCompleted))
           Task.IsCompleted = isCompleted;
        //else
            // TODO: log error

        await MarkAsCompleteClicked.InvokeAsync(Task);
    }

    private async Task DeleteTaskAsync(EventArgs e)
    {
        await DeleteTaskClicked.InvokeAsync(Task);
    }

    private async Task EditTaskAsync(EventArgs e)
    {
        Task.IsEditing = true;
        await EditTaskClicked.InvokeAsync(Task);
    }

    private async Task SaveTaskAsync(EventArgs e)
    {
        await SaveTaskClicked.InvokeAsync(Task);
    }
}
